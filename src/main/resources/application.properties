quarkus.application.name=search-quarkus-io

# Application defaults
fetching.quarkusio.method=git
fetching.quarkusio.uri=${uris.quarkusio.${fetching.quarkusio.method}}
uris.quarkusio.git=https://github.com/quarkusio/quarkusio.github.io.git
uris.quarkusio.local=file:${uris.local.default-root}/quarkusio

# More secure HTTP defaults
quarkus.http.cors=true
quarkus.http.cors.origins=https://quarkus.io/
quarkus.http.cors.methods=GET
quarkus.http.header."X-Content-Type-Options".value=nosniff
quarkus.http.header."X-Frame-Options".value=deny
quarkus.http.header."Strict-Transport-Security".value=max-age=31536000; includeSubDomains

# Hibernate
## We actually don't need persistence, it's just that Hibernate Search requires Hibernate ORM at the moment.
## So we just use an in-memory DB.
quarkus.datasource.jdbc.url=jdbc:h2:mem:searchquarkusio
quarkus.hibernate-orm.database.generation=drop-and-create
## Hibernate Search
quarkus.hibernate-search-orm.elasticsearch.version=opensearch:2.11
quarkus.elasticsearch.devservices.image-name=docker.io/opensearchproject/opensearch:2.11.0
## We need to apply a custom OpenSearch mapping to exclude very large fields from the _source
quarkus.hibernate-search-orm.elasticsearch.schema-management.mapping-file=indexes/mapping-template.json
## We don't expect OpenSearch to be reachable when the application starts
quarkus.hibernate-search-orm.elasticsearch.version-check.enabled=false
## ... and the application automatically creates indexes upon first indexing anyway.
quarkus.hibernate-search-orm.schema-management.strategy=none

# Dev/testing
quarkus.test.integration-test-profile=integrationtest
## We don't want our tests to rely on remote services (GitHub, ...),
## so for tests we index data included directly in the project directory.
%dev,test,integrationtest.fetching.quarkusio.method=local
%dev,test,integrationtest.uris.local.default-root=${maven.test.data.path}
## Logging
quarkus.log.category."org.hibernate.search".min-level=TRACE
%dev,test,integrationtest.quarkus.log.category."org.hibernate.search".level=INFO
quarkus.log.category."org.elasticsearch.client".min-level=TRACE
%dev,test,integrationtest.quarkus.log.category."org.elasticsearch.client".level=INFO
## Allow localhost in particular
%dev.quarkus.http.cors.origins=/.*/

# Log HTTP accesses
quarkus.http.access-log.enabled=true
quarkus.http.access-log.exclude-pattern=/q/.*

# Enable management, info, ...
quarkus.management.enabled=true
quarkus.info.enabled=true

# OpenAPI
mp.openapi.extensions.smallrye.info.title=Quarkus Search API
%dev.mp.openapi.extensions.smallrye.info.title=Quarkus Search API (dev)
%test.mp.openapi.extensions.smallrye.info.title=Quarkus Search API (test)
mp.openapi.extensions.smallrye.info.version=1.0.0
mp.openapi.extensions.smallrye.info.description=Search Quarkus resources
mp.openapi.extensions.smallrye.info.contact.email=quarkus-dev@googlegroups.com
mp.openapi.extensions.smallrye.info.contact.name=Quarkus team
mp.openapi.extensions.smallrye.info.contact.url=https://github.com/quarkusio/search.quarkus.io

# Swagger UI
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.title=Quarkus Search API

# Deployment to OpenShift
quarkus.container-image.builder=openshift
quarkus.openshift.part-of=search-quarkus-io
# See src/main/kubernetes/openshift.yml for the search-backend StatefulSet definition
# Rely on OpenShift's internal DNS to resolve the IP to search-backend nodes
quarkus.openshift.env.vars.quarkus-hibernate-search-orm-elasticsearch-hosts=search-backend-0.search-backend:9200,search-backend-1.search-backend:9200,search-backend-2.search-backend:9200
# Images built on OpenShift have their HOME environment variable set to '/' by default,
# which obviously won't work well due to filesystem permissions.
# JGit in particular doesn't like it: https://bugs.eclipse.org/bugs/show_bug.cgi?id=560555
# We need a directory with write access, and this seems to be the only reliable one.
quarkus.openshift.env.vars.home=/tmp
# Renew the SSL certificate automatically
# This requires an additional controller to run on the OpenShift cluster (in our case it does).
# See https://github.com/tnozicka/openshift-acme/#enabling-acme-certificates-for-your-object
quarkus.openshift.annotations."kubernetes.io/tls-acme"=true
quarkus.openshift.env.configmaps=search-quarkus-io-config
quarkus.openshift.env.secrets=search-quarkus-io-secrets
# Declare resource requirements
quarkus.openshift.resources.limits.cpu=1
quarkus.openshift.resources.requests.cpu=0.5
quarkus.openshift.resources.limits.memory=500M
quarkus.openshift.resources.requests.memory=200M
# Initial indexing may take a while, especially the quarkus.io Git cloning
quarkus.openshift.startup-probe.period=10S
quarkus.openshift.startup-probe.failure-threshold=6
# Declare the management port on the service
quarkus.openshift.ports."management".container-port=9000
quarkus.openshift.ports."management".host-port=90