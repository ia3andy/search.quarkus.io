quarkus.application.name=search-quarkus-io

# Application defaults
fetching.quarkusio.method=git
fetching.quarkusio.uri=${uris.quarkusio.${fetching.quarkusio.method}}
uris.quarkusio.git=https://github.com/quarkusio/quarkusio.github.io.git
uris.quarkusio.local=file:${uris.local.default-root}/quarkusio

## We actually don't need persistence, it's just that Hibernate Search requires Hibernate ORM at the moment.
## So we just use an in-memory DB.
quarkus.datasource.jdbc.url=jdbc:h2:mem:searchquarkusio
quarkus.hibernate-orm.database.generation=drop-and-create

## We need to apply a custom Elasticsearch mapping to exclude very large fields from the _source
quarkus.hibernate-search-orm.elasticsearch.schema-management.mapping-file=elasticsearch/mapping-template.json

# Dev/testing
quarkus.test.integration-test-profile=integrationtest
## We don't want our tests to rely on remote services (GitHub, ...),
## so for tests we index data included directly in the project directory.
%dev,test,integrationtest.fetching.quarkusio.method=local
%dev,test,integrationtest.uris.local.default-root=${maven.test.data.path}

# Hibernate
quarkus.hibernate-search-orm.elasticsearch.version=8.10
quarkus.elasticsearch.devservices.image-name=docker.io/elastic/elasticsearch:8.10.2

# More secure HTTP defaults
quarkus.http.cors=true
quarkus.http.header."X-Content-Type-Options".value=nosniff
quarkus.http.header."X-Frame-Options".value=deny
quarkus.http.header."Strict-Transport-Security".value=max-age=31536000; includeSubDomains

# Log HTTP accesses
quarkus.http.access-log.enabled=true
quarkus.http.access-log.exclude-pattern=/q/.*

# Enable management, info, ...
quarkus.management.enabled=true
quarkus.info.enabled=true

# OpenAPI
mp.openapi.extensions.smallrye.info.title=Quarkus Search API
%dev.mp.openapi.extensions.smallrye.info.title=Quarkus Search API (dev)
%test.mp.openapi.extensions.smallrye.info.title=Quarkus Search API (test)
mp.openapi.extensions.smallrye.info.version=1.0.0
mp.openapi.extensions.smallrye.info.description=Search Quarkus resources
mp.openapi.extensions.smallrye.info.contact.email=quarkus-dev@googlegroups.com
mp.openapi.extensions.smallrye.info.contact.name=Quarkus team
mp.openapi.extensions.smallrye.info.contact.url=https://github.com/quarkusio/search.quarkus.io

# Swagger UI
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.title=Quarkus Search API

# Production
# See src/main/kubernetes/openshift.yml for the Elasticsearch StatefulSet definition
# Rely on OpenShift's internal DNS to resolve the IP to Elasticsearch nodes
%prod.quarkus.hibernate-search-orm.elasticsearch.hosts="elasticsearch-0.elasticsearch,elasticsearch-1.elasticsearch,elasticsearch-2.elasticsearch"\
%prod.quarkus.hibernate-search-orm.elasticsearch.protocol=http
## We don't expect Elasticsearch to be reachable when the application starts
%prod.quarkus.hibernate-search-orm.elasticsearch.version-check.enabled=false
## ... and the application automatically creates indexes upon first indexing anyway.
%prod.quarkus.hibernate-search-orm.schema-management.strategy=none

# Deployment to OpenShift
%prod.quarkus.openshift.part-of=search-quarkus-io
# Renew the SSL certificate automatically
# This requires an additional controller to run on the OpenShift cluster (in our case it does).
# See https://github.com/tnozicka/openshift-acme/#enabling-acme-certificates-for-your-object
%prod.quarkus.openshift.annotations."kubernetes.io/tls-acme"=true
%prod.quarkus.openshift.env.configmaps=search-quarkus-io-config
%prod.quarkus.openshift.env.secrets=search-quarkus-io-secrets
# Declare the management port on the service
%prod.quarkus.openshift.ports."management".container-port=9000
%prod.quarkus.openshift.ports."management".host-port=90